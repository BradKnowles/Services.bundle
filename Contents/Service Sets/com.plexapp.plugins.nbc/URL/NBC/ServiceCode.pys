VIDGUID_URL = 'https://api.nbc.com/v3.14/videos?filter[guid]=%s&include=image'
NAMESPACES = {'a': 'http://www.w3.org/2005/SMIL21/Language'}

SMIL_EXT = '&policy=43674&formats=m3u,mpeg4&format=SMIL&embedded=true'

RE_VIDEO_GUID = Regex('^http:\/\/www\.nbc\.com\/.+\/video\/.+\/(\d{7})')
RE_VIDEO_GUID2 = Regex('"guid":"(.+?)",')

####################################################################################################
def NormalizeURL(url):

	if '#' in url and '|' in url and not '?' in url:
		return url

	return url.split('#')[0].split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	json = GetMediaData(url)
	episode = json['data'][0]

	show = None

	for item in episode['attributes']['categories']: 
		if item.startswith('Series'):
			show = item.split('Series/')[1]
			break
	try: index = int(episode['attributes']['episodeNumber'])
	except: index = None
	try: season = int(episode['attributes']['seasonNumber'])
	except: season = None

	duration = int(episode['attributes']['runTime']) * 1000
	date = Datetime.ParseDate(episode['attributes']['airdate'])
	title = episode['attributes']['title']
	summary = episode['attributes']['description']

	try: thumb = 'http://www.nbc.com' + json['included'][0]['attributes']['path']
	except: thumb = ''

	if show and season and index:

		return EpisodeObject(
			show = show,
			season = int(season),
			index = int(index),
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			originally_available_at = date
		)

	else:
		return VideoClipObject(
			title = title,
			summary = summary,
			duration = duration,
			thumb = Resource.ContentsOfURLWithFallback(thumb),
			originally_available_at = date
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			protocol = 'hls',
			container = 'mpegts',
			audio_codec = AudioCodec.AAC,
			video_codec = VideoCodec.H264,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	json = GetMediaData(url)
	episode = json['data'][0]

	smil_url = episode['attributes']['mediaUrl'] + SMIL_EXT

	try: 
		smil = XML.ElementFromURL(smil_url)
	except: 
		raise Ex.MediaNotAvailable

	videos =  smil.xpath('//a:video/@src', namespaces=NAMESPACES)
	#Log('the value of videos is %s' %videos)

	if len(videos) < 1:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject,
		key = HTTPLiveStreamURL(videos[0])
	)

####################################################################################################
def GetMediaData(url):

	#Log('the value of the url is %s' %url)
	try: 
		video_guid = RE_VIDEO_GUID.search(url).group(1)
	except: 
		try:
			page = HTTP.Request(url, cacheTime=CACHE_1HOUR).content
			video_guid = RE_VIDEO_GUID2.search(page).group(1)
		except:
			raise Ex.MediaNotAvailable

	#Log('the value of the video_guid is %s' %video_guid)
	video_api = VIDGUID_URL %video_guid

	try: 
		json = JSON.ObjectFromURL(video_api)
	except: 
		raise Ex.MediaNotAvailable

	return json
